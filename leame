Crear una entidad News que extienda Entity\News configurar Repository
 * @ORM\Table(name="success_news")
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks
 * @Gedmo\TranslationEntity(class="Success\NewsBundle\Model\NewsTranslation")
Crear clase Repository que extienda a Repository\BaseNewsRepository
Crear clase Admin y extender la otra Admin

  /**
   *
   * @Gedmo\Translatable
   * @ORM\Column(name="title", type="string", length=100, nullable=false)
   */
  protected $title;
  
  /**
   *
   * @Gedmo\Translatable
   * @ORM\Column(name="content", type="text", nullable=false)
   */
  protected $content;

  /**
   * @ORM\OneToMany(
   *   targetEntity="NewsTranslation",
   *   mappedBy="object",
   *   cascade={"persist", "remove"}
   * )
   */
  protected $translations;

  public function getTranslations() {
    return $this->translations;
  }

  /**
   * Set translations
   *
   * @param ArrayCollection $translations
   * @return News
   */
  public function setTranslations($translations) {
    foreach ($translations as $translation) {
      $translation->setObject($this);
    }

    $this->translations = $translations;
    return $this;
  }

  /**
   * Add translations
   *
   * @param Success\NewsBundle\Entity\NewsTranslation $translations
   * @return News
   */
  public function addTranslation(\Success\NewsBundle\Entity\NewsTranslation $translations) {
    $this->translations[] = $translations;

    return $this;
  }

  /**
   * Remove translations
   *
   * @param Success\NewsBundle\Entity\NewsTranslation $translations
   */
  public function removeTranslation(\Success\NewsBundle\Entity\NewsTranslation $translations) {
    $this->translations->removeElement($translations);
  }


EN ADMIN

->with('Traducciones')
->add('translations', 'a2lix_translations', array(
    'required' => false, // [optional] Overrides default_required if need
    'fields' => array(// [optional] Manual configuration of fields to display and options. If not specified, all translatable fields will be display, and options will be auto-detected
        'title' => array(
            'label' => 'Titulo', // [optional] Custom label. Ucfirst, otherwise
        ),
        'content' => array(
            'label' => 'Descripcion',
            'attr' => array('style' => 'width:600px; height: 400px', 'class' => 'tinymce', 'data-theme' => 'medium', 'rows' => 20)
        )
    )
))
->end()
->setHelps(array(
    'content' => 'Write a news, dude.',
))

->with('Imagenes')
  ->add('newsHasMedias', 'sonata_type_collection', array(
          'cascade_validation' => true,
          'required' => false,
          'by_reference' => false,
          'label' => 'Medias'
      ), array(
          'edit' => 'inline',
          'inline' => 'table',
          'sortable'  => 'position',
          'link_parameters' => array('context' => 'default'),
          'allow_delete' => true
      ))
->end()

EXTENDER CONTROLADOR



COMENTARIOS
Agregar en el success_news 

Activar modulo comentarios appKernell
    new FOS\RestBundle\FOSRestBundle(),
    new FOS\CommentBundle\FOSCommentBundle(),
    new JMS\SerializerBundle\JMSSerializerBundle($this),

fos_comment:
    db_driver: orm
    class:
        model:
            comment: Success\NewsBundle\Entity\Comment
            thread: Success\NewsBundle\Entity\Thread

OPCIONAL
assetic:
    bundles: [ "FOSCommentBundle" ]


COMENTARIOS
<?php

namespace Application\Success\PortalBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Success\NewsBundle\Entity\BaseComment as BaseComment;
use FOS\CommentBundle\Model\SignedCommentInterface;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @ORM\Table(name="success_comment")
 * @ORM\Entity
 * @ORM\Entity(repositoryClass="Application\Success\PortalBundle\Entity\Repository\CommentRepository")
 */
class Comment extends BaseComment {

  /**
   * Author of the comment
   *
   * @ORM\ManyToOne(targetEntity="Application\Success\UsuarioBundle\Entity\User")
   * @var User
   */
  protected $author;

  public function setAuthor(UserInterface $author) {
    $this->author = $author;
  }

  public function getAuthor() {
    return $this->author;
  }

  public function getAuthorName() {
    if (null === $this->getAuthor()) {
      return 'Anonymous';
    }

    return $this->getAuthor()->getUsername();
  }

}
